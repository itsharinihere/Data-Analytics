# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wKPKST9hkieNL3BQL0RduyBJbwGJM0wp
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load datasets
course_df = pd.read_csv('studentcourse.csv')
assessment_df = pd.read_csv('studentAssesment.csv')
assessments_df = pd.read_csv('assesments.csv')
registration_df = pd.read_csv('studentRegistration.csv')
vle_df = pd.read_csv('studentVLE.csv')
info_df = pd.read_csv('studentinfo.csv')  # If distinct

# Show first few rows of each
dfs = {
    "Course": course_df,
    "Assessment": assessment_df,
    "Assessments": assessments_df,
    "Registration": registration_df,
    "VLE": vle_df,
    "Info": info_df
}

for name, df in dfs.items():
    print(f"\n{name} DataFrame:")
    display(df.head())

from sklearn.preprocessing import LabelEncoder

def clean_data(df):
    # Drop duplicates
    df = df.drop_duplicates()

    # Handle missing values
    df = df.fillna(method='ffill').fillna(method='bfill')  # forward/backward fill

    # Encode categorical columns
    for col in df.select_dtypes(include='object').columns:
        df[col] = LabelEncoder().fit_transform(df[col].astype(str))

    return df

cleaned_dfs = {}
for name, df in dfs.items():
    cleaned_dfs[name] = clean_data(df.copy())
    print(f"{name} cleaned successfully.")

import matplotlib.pyplot as plt
import seaborn as sns

# Summary statistics
for name, df in cleaned_dfs.items():
    print(f"\n{name} Summary:")
    display(df.describe())

# Visualize distribution of scores (example: assessment_df)
plt.figure(figsize=(8, 4))
sns.histplot(assessment_df['score'], kde=True)
plt.title('Distribution of Assessment Scores')
plt.xlabel('Score')
plt.ylabel('Frequency')
plt.show()

# 1. Average Score Per Module
merged_df = assessment_df.merge(assessments_df, on='id_assessment')
avg_score = merged_df.groupby('code_module')['score'].mean().reset_index()
print("\nAverage score per module:")
display(avg_score)

# 2. Registration vs Dropout (if date_unregistration present)
if 'date_unregistration' in registration_df.columns:
    registration_df['dropped'] = registration_df['date_unregistration'].notnull()
    dropout_rate = registration_df.groupby('code_module')['dropped'].mean().reset_index()
    print("\nDropout Rate per Module:")
    display(dropout_rate)

# Final visual: dropout rate per module
if 'dropped' in registration_df.columns:
    plt.figure(figsize=(8, 4))
    sns.barplot(data=dropout_rate, x='code_module', y='dropped')
    plt.title('Dropout Rate per Module')
    plt.ylabel('Dropout Rate')
    plt.xlabel('Module')
    plt.show()
